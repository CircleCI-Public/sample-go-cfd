# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  # The Go orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/go
  go: circleci/go@1.7.3
  snyk: snyk/snyk@1.7.0

executors:
  go:
    docker:
      - image: cimg/go:1.20
    environment:
      CGO_ENABLED: 0

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a docker executor: https://circleci.com/docs/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/go
    docker:
      - image: cimg/go:1.19.2
      - image: cimg/postgres:14.5
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cfd
    steps:
      # Checkout the code as the first step.
      - checkout
      - go/load-cache # Load cached Go modules.
      - go/mod-download # Run 'go mod download'.
      - go/save-cache # Save Go modules to cache.
      - go/test: # Runs 'go test ./...' but includes extensive parameterization for finer tuning.
          covermode: atomic
          failfast: true
          race: true
  vulnerability-scan:
    executor: go
    steps:
      - checkout
      - run:
          name: Setup Scanning
          command: |
              git config --global url."https://$GITHUB_USER:$GITHUB_TOKEN@github.com/circleci/".insteadOf "https://github.com/circleci/"
      - when:
          condition:
              or:
                - equal: [ main, << pipeline.git.branch >> ]
          steps:
              - run:
                  name: Launching Snyk Orb Scanning
                  command: echo "Running snyk/scan on main; uploading the results"
              - run:
                  name: Cleanup RemoteRepoURL
                  command: echo 'export REMOTE_REPO_URL="${CIRCLE_REPOSITORY_URL%".git"}"' >> "$BASH_ENV"
              - snyk/scan:
                  organization: "circleci-public"
                  fail-on-issues: true
                  severity-threshold: high
                  monitor-on-build: true
                  additional-arguments: "--all-projects --remote-repo-url=${REMOTE_REPO_URL} -d"
      - unless:
          condition:
              or:
                - equal: [ main, << pipeline.git.branch >> ]
          steps:
              - run:
                  name: Launching Snyk Orb Scanning
                  command: echo "Running snyk/scan on branch; not uploading the results"
              - snyk/scan:
                  organization: "circleci-public"
                  fail-on-issues: true
                  severity-threshold: high
                  monitor-on-build: false
                  additional-arguments: "--all-projects -d"

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/configuration-reference/#workflows
  sample:
    jobs:
      - build-and-test
      - vulnerability-scan:
          context: org-global-employees
